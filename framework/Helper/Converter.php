<?php
/**
 * Этот файл является частью пакета GM Framework.
 * 
 * @link https://gearmagic.ru/framework/
 * @copyright Copyright (c) 2015 Веб-студия GearMagic
 * @license https://gearmagic.ru/license/
 */

namespace Gm\Helper;

use Gm;
use IntlDateFormatter;

/**
 * Вспомогательный класс Convert, позволяет конвертировать формат одних 
 * единиц в формат других.
 * 
 * @author Anton Tivonenko <anton.tivonenko@gmail.com>
 * @package Gm\Helper
 * @since 2.0
 */
class Converter
{
    /**
     * Определение коротких шаблонов даты и времени для ICU.
     * 
     * Это используется тогда, когда расширение PHP intl не установлено.
     * 
     * @var array
     */
    public static array $icuDatePatterns = [
        'short' => [
            'date'     => 'n/j/y',
            'time'     => 'H:i',
            'datetime' => 'n/j/y H:i'
        ],
        'medium' => [
            'date'     => 'M j, Y',
            'time'     => 'g:i:s A',
            'datetime' => 'M j, Y g:i:s A'
        ],
        'long' => [
            'date'     => 'F j, Y',
            'time'     => 'g:i:sA',
            'datetime' => 'F j, Y g:i:sA'
        ],
        'full' => [
            'date'     => 'l, F j, Y',
            'time'     => 'g:i:sA T',
            'datetime' => 'l, F j, Y g:i:sA T'
        ]
    ];

    /**
     * Cопоставление имен кратких форматов со значениями констант IntlDateFormatter.
     * 
     * @var array
     */
    private static array $icuShortFormats = [
        'short'  => 3, // IntlDateFormatter::SHORT,
        'medium' => 2, // IntlDateFormatter::MEDIUM,
        'long'   => 1, // IntlDateFormatter::LONG,
        'full'   => 0 // IntlDateFormatter::FULL
    ];

    /**
     * Конвертирует все символы ASCII < 32 в "\HEX".
     *
     * @link http://pear.php.net/package/Net_LDAP2
     *
     * @param string $string String Строка преобразования.
     * 
     * @return string
     */
    public static function ascToHex32(string $string): string
    {
        for ($i = 0, $len = strlen($string); $i < $len; $i++) {
            $char = substr($string, $i, 1);
            if (ord($char) < 32) {
                $hex = dechex(ord($char));
                if (strlen($hex) == 1) {
                    $hex = '0' . $hex;
                }
                $string = str_replace($char, '\\' . $hex, $string);
            }
        }
        return $string;
    }

    /**
     * Конвертирует все символы ("\HEX") к их исходным символам ASCII.
     *
     * @link http://pear.php.net/package/Net_LDAP2
     * 
     * @param string $string String Строка преобразования.
     * 
     * @return string
     */
    public static function hex32ToAsc(string $string): string
    {
        $string = preg_replace_callback('/\\\([0-9A-Fa-f]{2})/', function ($matches) {
            return chr(hexdec($matches[1]));
        }, $string);
        return $string;
    }

    /**
     * Преобразует шаблон формата даты из формата ICU в формат функции PHP date().
     *
     * Преобразование ограничено шаблонами даты, в которых не используются экранированные символы.
     * Такой шаблон, как "d 'of' MMMM yyyy", приведет к дате "1 января 2015", не может быть 
     * преобразован правильно из-за использования экранированных символов
     *
     * Конструкции шаблонов, не поддерживаемые форматом PHP, будут удалены.
     *
     * @link https://www.php.net/manual/ru/function.date.php
     * @link http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax
     *
     * @param string $pattern Шаблон формата даты в формате ICU.
     * @param string $type Тип: "date", "time" или "datetime".
     * @param string $locale Код локади, используемый для преобразования коротких шаблонов ICU "short", "medium", "long" и "full".
     *    Если не указан, будет использоваться Gm::$app->language->locale.
     * 
     * @return string
     */
    public static function convertDateIcuToPhp(string $pattern, string $type = 'date', ?string $locale = null): string
    {
        if (isset(self::$icuShortFormats[$pattern])) {
            if (extension_loaded('intl')) {
                if ($locale === null) {
                    $locale = Gm::$app->language->locale;
                }
                if ($type === 'date') {
                    $formatter = new IntlDateFormatter($locale, self::$icuShortFormats[$pattern], IntlDateFormatter::NONE);
                } elseif ($type === 'time') {
                    $formatter = new IntlDateFormatter($locale, IntlDateFormatter::NONE, self::$icuShortFormats[$pattern]);
                } else {
                    $formatter = new IntlDateFormatter($locale, self::$icuShortFormats[$pattern], self::$icuShortFormats[$pattern]);
                }
                $pattern = $formatter->getPattern();
            } else {
                return static::$icuDatePatterns[$pattern][$type];
            }
        }

        // http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax
        // экранированный текст
        $escaped = [];
        if (preg_match_all('/(?<!\')\'(.*?[^\'])\'(?!\')/', $pattern, $matches, PREG_SET_ORDER)) {
            foreach ($matches as $match) {
                $match[1] = str_replace('\'\'', '\'', $match[1]);
                $escaped[$match[0]] = '\\' . implode('\\', preg_split('//u', $match[1], -1, PREG_SPLIT_NO_EMPTY));
            }
        }
        return strtr($pattern, array_merge($escaped, [
            "''" => "\\'",  // две одинарные кавычки дают одну
            'G' => '',      // указатель эпохи как (Anno Domini)
            'Y' => 'o',     // 4 цифры года, например "Week of Year"
            'y' => 'Y',     // 4 цифры года, например 2014
            'yyyy' => 'Y',  // 4 цифры года, например 2014
            'yy' => 'y',    // 2 цифры год, например. 14
            'u' => '',      // продленный год, например 4601
            'U' => '',      // циклическое название года, как в китайском лунном календаре
            'r' => '',      // Григорианский год, например 1996
            'Q' => '',      // номер квартала
            'QQ' => '',     // номер квартала "02"
            'QQQ' => '',    // квартала "Q2"
            'QQQQ' => '',   // квартала "2nd quarter"
            'QQQQQ' => '',  // номер квартала "2"
            'q' => '',      // количество Stand Alone кварталов
            'qq' => '',     // количество Stand Alone кварталов "02"
            'qqq' => '',    // Stand Alone квартал "Q2"
            'qqqq' => '',   // Stand Alone квартал "2nd quarter"
            'qqqqq' => '',  // количество Stand Alone кварталов "2"
            'M' => 'n',     // Числовое представление месяца без ведущих нулей
            'MM' => 'm',    // Числовое представление месяца с ведущими нулями
            'MMM' => 'M',   // Краткое текстовое представление месяца, три буквы
            'MMMM' => 'F',  // Полное текстовое представление месяца, например: January или March
            'MMMMM' => '',
            'L' => 'n',     // Автономный месяц в году
            'LL' => 'm',    // Автономный месяц в году
            'LLL' => 'M',   // Автономный месяц в году
            'LLLL' => 'F',  // Автономный месяц в году
            'LLLLL' => '',  // Автономный месяц в году
            'w' => 'W',     // ISO-8601 номер недели в году
            'ww' => 'W',    // ISO-8601 номер недели в году
            'W' => '',      // неделя текущего месяца
            'd' => 'j',     // день без ведущих нулей
            'dd' => 'd',    // день с ведущими нулями
            'D' => 'z',     // день года от 0 до 365
            'F' => '',      // День недели в месяце, например 2nd Wednesday in July
            'g' => '',      // Модифицированный юлианский день. Он отличается от обычного числа дней по юлианскому календарю в двух отношениях
            'E' => 'D',     // день недели, записанный в краткой форме, например Sun
            'EE' => 'D',
            'EEE' => 'D',
            'EEEE' => 'l',  // день недели полностью записан, например Sunday
            'EEEEE' => '',
            'EEEEEE' => '',
            'e' => 'N',     // ISO-8601 числовое представление дня недели 1=Mon to 7=Sun
            'ee' => 'N',    // php 'w' 0=Sun to 6=Sat не поддерживается ICU -> 'w' означает номер недели в году
            'eee' => 'D',
            'eeee' => 'l',
            'eeeee' => '',
            'eeeeee' => '',
            'c' => 'N',     // ISO-8601 числовое представление дня недели 1=Mon to 7=Sun
            'cc' => 'N',    // php 'w' 0=Sun to 6=Sat не поддерживается by ICU -> 'w' означает номер недели в году
            'ccc' => 'D',
            'cccc' => 'l',
            'ccccc' => '',
            'cccccc' => '',
            'a' => 'A',     // AM/PM маркер
            'h' => 'g',     // 12-часовой формат часа без ведущих нулей от 1 до 12h
            'hh' => 'h',    // 12-часовой формат часа с ведущими нулями, 01 до 12 h
            'H' => 'G',     // 24-часовой формат часа без ведущих нулей 0 до 23h
            'HH' => 'H',    // 24-часовой формат часа с ведущими нулями, 00 до 23 h
            'k' => '',      // час в день (1~24)
            'kk' => '',     // час в день (1~24)
            'K' => '',      // час в am/pm (0~11)
            'KK' => '',     // час в am/pm (0~11)
            'm' => 'i',     // Минуты без начальных нулей, не поддерживаются php
            'mm' => 'i',    // Минуты с ведущими нулями
            's' => 's',     // Секунды без начальных нулей, не поддерживаются php
            'ss' => 's',    // Секунды с ведущими нулями
            'S' => '',      // доли секунды
            'SS' => '',     // доли секунды
            'SSS' => '',    // доли секунды
            'SSSS' => '',   // доли секунды
            'A' => '',      // миллисекунды в день
            'z' => 'T',     // Аббревиатура часового пояса
            'zz' => 'T',    // Аббревиатура часового пояса
            'zzz' => 'T',   // Аббревиатура часового пояса
            'zzzz' => 'T',  // Полное имя часового пояса, не поддерживается php, но применяется fallback
            'Z' => 'O',     // Разница во времени по Гринвичу (GMT) в часах
            'ZZ' => 'O',    // Разница во времени по Гринвичу (GMT) в часах
            'ZZZ' => 'O',   // Разница во времени по Гринвичу (GMT) в часах
            'ZZZZ' => '\G\M\TP', // Часовой пояс: долго локализованный GMT (=OOOO), например: GMT-08:00
            'ZZZZZ' => '',  //  Часовой пояс: ISO8601 расширенный hms? (=XXXXX)
            'O' => '',      // Часовой пояс: коротко локализованный GMT, например: GMT-8
            'OOOO' => '\G\M\TP', // Часовой пояс: long localized GMT (=ZZZZ), например: GMT-08:00
            'v' => '\G\M\TP', // Часовой пояс: отсутствие местоположения (отступы сперва для VVVV а тогда для OOOO) использует ICU определенного в fallback
            'vvvv' => '\G\M\TP', // Часовой пояс: отсутствие местоположения (отступы сперва для VVVV а тогда для OOOO) использует ICU определенного в fallback
            'V' => '',      // Часовой пояс: ID короткого часового пояса
            'VV' => 'e',    // Часовой пояс: ID длинного часового пояса
            'VVV' => '',    // Часовой пояс: образец часового пояса, город
            'VVVV' => '\G\M\TP', // Часовой пояс: общее местоположение ((отступы для OOOO) использует ICU определенного в fallback
            'X' => '',      // Часовой пояс: ISO8601 основной hm?, с Z для 0, например: -08, +0530, Z
            'XX' => 'O, \Z', // Часовой пояс: ISO8601 основной hm, с Z, например: -0800, Z
            'XXX' => 'P, \Z',    // Часовой пояс: ISO8601 расширенный hm, с Z, например: -08:00, Z
            'XXXX' => '',   // Часовой пояс: ISO8601 основной hms?, с Z, например: -0800, -075258, Z
            'XXXXX' => '',  // Часовой пояс: ISO8601 расширенный hms?, с Z, например:. -08:00, -07:52:58, Z
            'x' => '',      // Часовой пояс: ISO8601 основной hm?, без Z for 0, например: -08, +0530
            'xx' => 'O',    // Часовой пояс: ISO8601 основной hm, без Z, например: -0800
            'xxx' => 'P',   // Часовой пояс: ISO8601 расширенный hm, без Z, например: -08:00
            'xxxx' => '',   // Часовой пояс: ISO8601 основной hms?, без Z, например: -0800, -075258
            'xxxxx' => ''   // Часовой пояс: ISO8601 расширенный hms?, без Z, например: -08:00, -07:52:58
        ]));
    }

    /**
     * Преобразует шаблон формата даты из формат функции PHP date() в формата ICU.
     *
     * Конструкции шаблонов, которые не поддерживаются форматом ICU, будут удалены..
     *
     * @link https://www.php.net/manual/ru/function.date.php
     * @link http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax
     *
     * @param string $pattern Шаблон формата даты функции PHP date().
     * 
     * @return string
     */
    public static function convertDatePhpToIcu(string $pattern): string
    {
        $result = strtr($pattern,
        [
            "'"  => "''''",  // одна кавычка "'" должна быть закодирована как "''", если она внутри, должна быть закодирована как "''''"
            // День
            '\d' => "'d'",
            'd'  => 'dd',    // День месяца, 2 цифры с ведущими нулями: от 01 дo 31
            '\D' => "'D'",
            'D'  => 'eee',   // Текстовое представление дня, три буквы: от Mon до Sun
            '\j' => "'j'",
            'j'  => 'd',     // День месяца без ведущих нулей: от 1 до 31
            '\l' => "'l'",
            'l'  => 'eeee',  // Полное текстовое представление дня недели: от Sunday до Saturday
            '\N' => "'N'",
            'N'  => 'e',     // ISO-8601 числовое представление дня недели: от 1 (для Monday) до 7 (для Sunday)
            '\S' => "'S'",
            'S'  => '',      // Английский порядковый суффикс дня месяца, 2 символа: st, nd, rd or th.
                             // Хорошо работает даже с "j".
            '\w' => "'w'",
            'w'  => '',      // Числовое представление дня недели: от 0 (для Sunday) до 6 (для Saturday)
            '\z' => "'z'",
            'z'  => 'D',     // День года: (начиная с 0) 0 до 365
            // Неделя
            '\W' => "'W'",
            'W'  => 'w',     // ISO-8601 номер недели в году начиная с Monday (добавлено в PHP 4.1.0).
                             // Пример: 42 (the 42nd week in the year)
            // Month
            '\F' => "'F'",
            'F'  => 'MMMM',  // Полное текстовое представление месяца: от January до December
            '\m' => "'m'",
            'm'  => 'MM',    // Числовое представление месяца с ведущими нулями: от 01 до 12
            '\M' => "'M'",
            'M'  => 'MMM',   // Краткое текстовое представление месяца, три буквы: от Jan до Dec
            '\n' => "'n'",
            'n'  => 'M',     // Числовое представление месяца без ведущих нулей от 1 до 12, 
                             // не поддерживается ICU, возвращает "with leading zero"
            '\t' => "'t'",
            't'  => '',      // Количество дней в данном месяце: от 28 до 31
            // Год
            '\L' => "'L'",
            'L' => '',      // Если это високосный год 1, 0 в противном случае
            '\o' => "'o'",
            'o' => 'Y',     // ISO-8601 номер года. Он имеет то же значение, что и Y, за исключением того, 
                            // что если номер недели ISO (W) принадлежит предыдущему или следующему году, то вместо него используется этот год
            '\Y' => "'Y'",
            'Y' => 'yyyy',  // Полное числовое представление года, 4 цифры. Пример: 2015, 2016.
            '\y' => "'y'",
            'y' => 'yy',    // Двузначное представление года. Пример: 96 или 15
            // Time
            '\a' => "'a'",
            'a' => 'a',     // Строчные буквы «до полудня» и «после полудня», am или pm
            '\A' => "'A'",
            'A' => 'a',     // Верхний регистр «до полудня» и «после полудня», AM или PM, не поддерживается ICU, 
                            // тогда переводим в нижний регистр
            '\B' => "'B'",
            'B' => '',      // Свотч Интернет-время: от 000 до 999.
            '\g' => "'g'",
            'g' => 'h',     // 12-часовой формат часа без ведущих нулей: от 1 до 12
            '\G' => "'G'",
            'G' => 'H',     // 24-часовой формат часа без ведущих нулей от 0 до 23h
            '\h' => "'h'",
            'h' => 'hh',    // 12-часовой формат часа с ведущими нулями: от 01 до 12 h
            '\H' => "'H'",
            'H' => 'HH',    // 24-часовой формат часа с ведущими нулями: от 00 до 23 h
            '\i' => "'i'",
            'i' => 'mm',    // Минуты с ведущими нулями: от 00 до 59
            '\s' => "'s'",
            's' => 'ss',    // Секунды, с ведущими нулями: от 00 до 59
            '\u' => "'u'",
            'u' => '',      // Микросекунды. Пример: 654321
            // Timezone
            '\e' => "'e'",
            'e' => 'VV',    // Идентификатор часового пояса. Пример: UTC, GMT, Atlantic/Azores
            '\I' => "'I'",
            'I' => '',      // Независимо от того, переведена ли дата на летнее время - 1, 0 в противном случае.
            '\O' => "'O'",
            'O' => 'xx',    // Разница в часах по Гринвичу (GMT), пример: +0200
            '\P' => "'P'",
            'P' => 'xxx',   // Разница во времени по Гринвичу (GMT) с двоеточием между часами и минутами, пример: +02:00
            '\T' => "'T'",
            'T' => 'zzz',   // Аббревиатура часового пояса, Примеры: EST, MDT ...
            '\Z' => "'Z'",
            'Z' => '',      // Смещение часового пояса в секундах. Смещение для часовых поясов к западу от 
                            // UTC всегда отрицательно, а для часовых поясов к востоку от UTC всегда положительно. -43200 through 50400
            // Полная дата и время
            '\c' => "'c'",
            'c' => "yyyy-MM-dd'T'HH:mm:ssxxx", // ISO 8601 дата, 2004-02-12T15:19:21+00:00
            '\r' => "'r'",
            'r' => 'eee, dd MMM yyyy HH:mm:ss xx', // RFC 2822 формат даты. Пример: Thu, 21 Dec 2000 16:01:07 +0200
            '\U' => "'U'",
            'U' => '',      // Секунды с эпохи Unix (January 1 1970 00:00:00 GMT)
            '\\\\' => '\\',
        ]);
        // удалить "''" - результат последовательных экранированных символов ("\A\B" будет "'A''B'", а должно "'AB'")
        // на самом деле "'" кодируется как "''''"
        return strtr($result,
        [
            "''''" => "''",
            "''"   => ''
        ]);
    }
}